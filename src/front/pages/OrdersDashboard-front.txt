import React, { useState } from "react";

// Datos iniciales de las √≥rdenes simuladas
const initialOrders = [
  {
    id: 349,
    table: 1,
    status: "completed",
    timestamp: "2025-07-07 12:32",
    waiterId: "W001",
    note: "Cliente al√©rgico a frutos secos.",
    items: [
      { name: "Chinese Takeout Dish", category: "starters", qty: 1, status: "completed" },
      { name: "Vegetable Mixups", category: "main", qty: 1, status: "pending" },
      { name: "Chinese Takeout Dish", category: "desserts", qty: 2, status: "pending" },
      { name: "Baked Pasted Dishes", category: "drinks", qty: 1, status: "rejected" },
    ],
  },
  {
    id: 350,
    table: 2,
    status: "rejected",
    timestamp: "2025-07-07 13:15",
    waiterId: "W002",
    note: "Sin cebolla, alergia.",
    items: [
      { name: "Chinese Takeout Dish", category: "starters", qty: 1, status: "rejected" },
      { name: "Vegetable Mixups", category: "main", qty: 1, status: "rejected" },
      { name: "Chinese Takeout Dish", category: "desserts", qty: 2, status: "pending" },
      { name: "Baked Pasted Dishes", category: "drinks", qty: 1, status: "pending" },
    ],
  },
  {
    id: 351,
    table: 2,
    status: "pending",
    timestamp: "2025-07-07 14:00",
    waiterId: "W003",
    note: "Mesa pidi√≥ r√°pido, sin cambios.",
    items: [
      { name: "Vegetable Mixups", category: "main", qty: 1, status: "pending" },
    ],
  },
];

// Filtros para las √≥rdenes
const filters = ["all", "completed", "rejected", "pending"];

// Categor√≠as 
const categories = ["starters", "main", "desserts", "drinks"];

const OrdersDashboard = () => {
  // Estado para las √≥rdenes actuales
  const [orders, setOrders] = useState(initialOrders);

  // Estado para el filtro activo
  const [filter, setFilter] = useState("all");

  // IDs de las √≥rdenes que est√°n desplegadas
  const [openOrderIds, setOpenOrderIds] = useState([]);

  // IDs de las √≥rdenes con nota visible
  const [visibleNotes, setVisibleNotes] = useState([]);

  // Alterna la visibilidad de la nota de una orden
  const toggleNote = (orderId) => {
    setVisibleNotes((prev) =>
      prev.includes(orderId)
        ? prev.filter((id) => id !== orderId)
        : [...prev, orderId]
    );
  };

  // Aplica el filtro seleccionado a las √≥rdenes
  const filteredOrders =
    filter === "all"
      ? orders
      : orders
        .map((order) => ({
          ...order,
          items: order.items.filter((item) => item.status === filter),
        }))
        .filter((order) => order.items.length > 0);

  // Iconos a cada estado
  const statusIcon = {
    completed: "‚úÖ",
    rejected: "‚ùå",
    pending: "‚è≥",
  };

  // Abre o cierra una tarjeta de orden
  const toggleOrder = (id) => {
    setOpenOrderIds((prev) =>
      prev.includes(id) ? prev.filter((oid) => oid !== id) : [...prev, id]
    );
  };

  // Cambia el estado de un √≠tem espec√≠fico en una orden
  const updateItemStatus = (orderId, category, itemName, newStatus) => {
    setOrders((prevOrders) =>
      prevOrders.map((order) => {
        if (order.id !== orderId) return order;
        const updatedItems = order.items.map((item) =>
          item.category === category && item.name === itemName
            ? { ...item, status: newStatus }
            : item
        );
        return { ...order, items: updatedItems };
      })
    );
  };

  // Marca todos los √≠tems de la orden como completados
  const confirmAllItems = (orderId) => {
    setOrders((prev) =>
      prev.map((order) =>
        order.id === orderId
          ? {
            ...order,
            status: "completed",
            items: order.items.map((item) => ({
              ...item,
              status: "completed",
            })),
          }
          : order
      )
    );
  };

  // Reinicia todos los √≠tems de una orden a estado pendiente
  const resetOrderStatus = (orderId) => {
    setOrders((prev) =>
      prev.map((order) =>
        order.id === orderId
          ? {
            ...order,
            status: "pending",
            items: order.items.map((item) => ({
              ...item,
              status: "pending",
            })),
          }
          : order
      )
    );
  };

  return (
    <div className="orders-dashboard">
      {/* Header principal con logo, filtros y botones de usuario */}
      <div className="header">
        <div className="logo">
          <i className="fas fa-store"></i> <span>Japanese Restaurant</span>
        </div>

        {/* Botones de filtro por estado */}
        <div className="filters modern-filters">
          {filters.map((f) => (
            <button
              key={f}
              className={`filter-btn modern ${filter === f ? "active" : ""}`}
              onClick={() => setFilter(f)}
            >
              <i className={`fas ${f === "all"
                ? "fa-layer-group"
                : f === "completed"
                  ? "fa-check-circle"
                  : f === "rejected"
                    ? "fa-times-circle"
                    : "fa-hourglass-half"
                }`}></i> {f.toUpperCase()}
            </button>
          ))}
        </div>

        {/* Bot√≥n de perfil y logout */}
        <div className="user-panel">
          <button className="profile-btn">
            <i className="fas fa-circle-user"></i>
          </button>
          <button className="logout">
            <i className="fas fa-sign-out-alt"></i> Logout
          </button>
        </div>
      </div>

      {/* Lista de botones de √≥rdenes disponibles */}
      <div className="order-list-header">
        <h3 className="order-list-title">Order list:</h3>
        <div className="orders-buttons">
          {orders.map((order) => (
            <button key={order.id} className={`order-button ${order.status}`}>
              #{order.id}
            </button>
          ))}
        </div>
      </div>

      {/* Renderiza cada orden filtrada */}
      {filteredOrders.map((order) => (
        <div
          key={order.id}
          className={`order-card ${openOrderIds.includes(order.id) ? "" : "closed"}`}
        >
          {/* Cabecera de la tarjeta de orden */}
          <div className="order-header" onClick={() => toggleOrder(order.id)}>
            <div>
              <div>
                Order #{order.id} - Table #{order.table}
                <button
                  className="comment-btn"
                  onClick={(e) => {
                    e.stopPropagation();
                    toggleNote(order.id);
                  }}
                >
                  <i className="fas fa-comment-dots"></i>
                </button>
              </div>

              {/* info como hora y camarero */}
              <div className="order-meta">
                <i className="fas fa-clock"></i> {order.timestamp} ‚Äî <i className="fas fa-user-tie"></i> {order.waiterId}
              </div>

              {/* Nota del pedido, si est√° visible */}
              {visibleNotes.includes(order.id) && (
                <div className="order-note">
                  üìù <strong>Nota:</strong> {order.note}
                </div>
              )}
            </div>
          </div>

          {/* Secciones por categor√≠a (entrantes, principal, etc.) */}
          <div className="order-content">
            {categories.map((cat) => {
              const itemsInCategory = order.items.filter((item) => item.category === cat);
              return (
                <div key={cat} className="order-section">
                  <h4>{cat.charAt(0).toUpperCase() + cat.slice(1)}</h4>

                  {/* Listado de √≠tems por categor√≠a */}
                  {itemsInCategory.map((item, i) => (
                    <div key={i} className="order-item">
                      <span>{item.name}</span>
                      <span className="qty">Qty: {item.qty}</span>
                    </div>
                  ))}

                  {/* Botones de cambio de estado para cada √≠tem */}
                  <div className="order-actions-bottom">
                    {itemsInCategory.map((item, idx) => (
                      <div key={idx} className="status-controls">
                        <button
                          className={`status-btn completed ${item.status === "completed" ? "selected" : ""}`}
                          onClick={() => updateItemStatus(order.id, cat, item.name, "completed")}
                        >
                          ‚úÖ COMPLETED
                        </button>
                        <button
                          className={`status-btn rejected ${item.status === "rejected" ? "selected" : ""}`}
                          onClick={() => updateItemStatus(order.id, cat, item.name, "rejected")}
                        >
                          ‚ùå REJECTED
                        </button>
                        <button
                          className={`status-btn pending ${item.status === "pending" ? "selected" : ""}`}
                          onClick={() => updateItemStatus(order.id, cat, item.name, "pending")}
                        >
                          ‚è≥ PENDING
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>

          {/* Botones de confirmar o reiniciar la orden completa */}
          <div className="order-footer">
            <button
              className="confirm-order-btn"
              onClick={() => confirmAllItems(order.id)}
            >
              <i className="fas fa-check-circle"></i> Confirm Order
            </button>
            <button
              className="reset-order-btn"
              onClick={() => resetOrderStatus(order.id)}
            >
              <i className="fas fa-undo-alt"></i> Reset
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default OrdersDashboard;

